// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_cmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "control_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comm {
namespace cmd {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ControlCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControlCmd_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_control_5fcmd_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_control_5fcmd_2eproto() {
  protobuf_AddDesc_control_5fcmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "control_cmd.proto");
  GOOGLE_CHECK(file != NULL);
  ControlCmd_descriptor_ = file->message_type(0);
  static const int ControlCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCmd, linear_v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCmd, rotation_v_),
  };
  ControlCmd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ControlCmd_descriptor_,
      ControlCmd::internal_default_instance(),
      ControlCmd_offsets_,
      -1,
      -1,
      -1,
      sizeof(ControlCmd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlCmd, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_control_5fcmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ControlCmd_descriptor_, ControlCmd::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_control_5fcmd_2eproto() {
  ControlCmd_default_instance_.Shutdown();
  delete ControlCmd_reflection_;
}

void protobuf_InitDefaults_control_5fcmd_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  ControlCmd_default_instance_.DefaultConstruct();
  ControlCmd_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_control_5fcmd_2eproto_once_);
void protobuf_InitDefaults_control_5fcmd_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_control_5fcmd_2eproto_once_,
                 &protobuf_InitDefaults_control_5fcmd_2eproto_impl);
}
void protobuf_AddDesc_control_5fcmd_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_control_5fcmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021control_cmd.proto\022\016comm.cmd.proto\"\?\n\nC"
    "ontrolCmd\022\013\n\003cmd\030\001 \001(\t\022\020\n\010linear_v\030\002 \003(\002"
    "\022\022\n\nrotation_v\030\003 \001(\002b\006proto3", 108);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "control_cmd.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_control_5fcmd_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_control_5fcmd_2eproto_once_);
void protobuf_AddDesc_control_5fcmd_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_control_5fcmd_2eproto_once_,
                 &protobuf_AddDesc_control_5fcmd_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_control_5fcmd_2eproto {
  StaticDescriptorInitializer_control_5fcmd_2eproto() {
    protobuf_AddDesc_control_5fcmd_2eproto();
  }
} static_descriptor_initializer_control_5fcmd_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlCmd::kCmdFieldNumber;
const int ControlCmd::kLinearVFieldNumber;
const int ControlCmd::kRotationVFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlCmd::ControlCmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_control_5fcmd_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:comm.cmd.proto.ControlCmd)
}

void ControlCmd::InitAsDefaultInstance() {
}

ControlCmd::ControlCmd(const ControlCmd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comm.cmd.proto.ControlCmd)
}

void ControlCmd::SharedCtor() {
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rotation_v_ = 0;
  _cached_size_ = 0;
}

ControlCmd::~ControlCmd() {
  // @@protoc_insertion_point(destructor:comm.cmd.proto.ControlCmd)
  SharedDtor();
}

void ControlCmd::SharedDtor() {
  cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ControlCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlCmd_descriptor_;
}

const ControlCmd& ControlCmd::default_instance() {
  protobuf_InitDefaults_control_5fcmd_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ControlCmd> ControlCmd_default_instance_;

ControlCmd* ControlCmd::New(::google::protobuf::Arena* arena) const {
  ControlCmd* n = new ControlCmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControlCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.cmd.proto.ControlCmd)
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rotation_v_ = 0;
  linear_v_.Clear();
}

bool ControlCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comm.cmd.proto.ControlCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cmd = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "comm.cmd.proto.ControlCmd.cmd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_linear_v;
        break;
      }

      // repeated float linear_v = 2;
      case 2: {
        if (tag == 18) {
         parse_linear_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_linear_v())));
        } else if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_linear_v())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_rotation_v;
        break;
      }

      // optional float rotation_v = 3;
      case 3: {
        if (tag == 29) {
         parse_rotation_v:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_v_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comm.cmd.proto.ControlCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comm.cmd.proto.ControlCmd)
  return false;
#undef DO_
}

void ControlCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comm.cmd.proto.ControlCmd)
  // optional string cmd = 1;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "comm.cmd.proto.ControlCmd.cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cmd(), output);
  }

  // repeated float linear_v = 2;
  if (this->linear_v_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_linear_v_cached_byte_size_);
  }
  for (int i = 0; i < this->linear_v_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->linear_v(i), output);
  }

  // optional float rotation_v = 3;
  if (this->rotation_v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->rotation_v(), output);
  }

  // @@protoc_insertion_point(serialize_end:comm.cmd.proto.ControlCmd)
}

::google::protobuf::uint8* ControlCmd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:comm.cmd.proto.ControlCmd)
  // optional string cmd = 1;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "comm.cmd.proto.ControlCmd.cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmd(), target);
  }

  // repeated float linear_v = 2;
  if (this->linear_v_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _linear_v_cached_byte_size_, target);
  }
  for (int i = 0; i < this->linear_v_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->linear_v(i), target);
  }

  // optional float rotation_v = 3;
  if (this->rotation_v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->rotation_v(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:comm.cmd.proto.ControlCmd)
  return target;
}

size_t ControlCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.cmd.proto.ControlCmd)
  size_t total_size = 0;

  // optional string cmd = 1;
  if (this->cmd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmd());
  }

  // optional float rotation_v = 3;
  if (this->rotation_v() != 0) {
    total_size += 1 + 4;
  }

  // repeated float linear_v = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->linear_v_size();
    data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _linear_v_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comm.cmd.proto.ControlCmd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ControlCmd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlCmd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comm.cmd.proto.ControlCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comm.cmd.proto.ControlCmd)
    UnsafeMergeFrom(*source);
  }
}

void ControlCmd::MergeFrom(const ControlCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comm.cmd.proto.ControlCmd)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ControlCmd::UnsafeMergeFrom(const ControlCmd& from) {
  GOOGLE_DCHECK(&from != this);
  linear_v_.UnsafeMergeFrom(from.linear_v_);
  if (from.cmd().size() > 0) {

    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  if (from.rotation_v() != 0) {
    set_rotation_v(from.rotation_v());
  }
}

void ControlCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comm.cmd.proto.ControlCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlCmd::CopyFrom(const ControlCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.cmd.proto.ControlCmd)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ControlCmd::IsInitialized() const {

  return true;
}

void ControlCmd::Swap(ControlCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlCmd::InternalSwap(ControlCmd* other) {
  cmd_.Swap(&other->cmd_);
  linear_v_.UnsafeArenaSwap(&other->linear_v_);
  std::swap(rotation_v_, other->rotation_v_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControlCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControlCmd_descriptor_;
  metadata.reflection = ControlCmd_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ControlCmd

// optional string cmd = 1;
void ControlCmd::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ControlCmd::cmd() const {
  // @@protoc_insertion_point(field_get:comm.cmd.proto.ControlCmd.cmd)
  return cmd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ControlCmd::set_cmd(const ::std::string& value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.cmd.proto.ControlCmd.cmd)
}
void ControlCmd::set_cmd(const char* value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.cmd.proto.ControlCmd.cmd)
}
void ControlCmd::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.cmd.proto.ControlCmd.cmd)
}
::std::string* ControlCmd::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:comm.cmd.proto.ControlCmd.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ControlCmd::release_cmd() {
  // @@protoc_insertion_point(field_release:comm.cmd.proto.ControlCmd.cmd)
  
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ControlCmd::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:comm.cmd.proto.ControlCmd.cmd)
}

// repeated float linear_v = 2;
int ControlCmd::linear_v_size() const {
  return linear_v_.size();
}
void ControlCmd::clear_linear_v() {
  linear_v_.Clear();
}
float ControlCmd::linear_v(int index) const {
  // @@protoc_insertion_point(field_get:comm.cmd.proto.ControlCmd.linear_v)
  return linear_v_.Get(index);
}
void ControlCmd::set_linear_v(int index, float value) {
  linear_v_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.cmd.proto.ControlCmd.linear_v)
}
void ControlCmd::add_linear_v(float value) {
  linear_v_.Add(value);
  // @@protoc_insertion_point(field_add:comm.cmd.proto.ControlCmd.linear_v)
}
const ::google::protobuf::RepeatedField< float >&
ControlCmd::linear_v() const {
  // @@protoc_insertion_point(field_list:comm.cmd.proto.ControlCmd.linear_v)
  return linear_v_;
}
::google::protobuf::RepeatedField< float >*
ControlCmd::mutable_linear_v() {
  // @@protoc_insertion_point(field_mutable_list:comm.cmd.proto.ControlCmd.linear_v)
  return &linear_v_;
}

// optional float rotation_v = 3;
void ControlCmd::clear_rotation_v() {
  rotation_v_ = 0;
}
float ControlCmd::rotation_v() const {
  // @@protoc_insertion_point(field_get:comm.cmd.proto.ControlCmd.rotation_v)
  return rotation_v_;
}
void ControlCmd::set_rotation_v(float value) {
  
  rotation_v_ = value;
  // @@protoc_insertion_point(field_set:comm.cmd.proto.ControlCmd.rotation_v)
}

inline const ControlCmd* ControlCmd::internal_default_instance() {
  return &ControlCmd_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cmd
}  // namespace comm

// @@protoc_insertion_point(global_scope)
