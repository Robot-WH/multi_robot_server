// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: orbit_network.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "orbit_network.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comm {
namespace orbitNet {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* StateNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrbitNetwork_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrbitNetwork_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_orbit_5fnetwork_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_orbit_5fnetwork_2eproto() {
  protobuf_AddDesc_orbit_5fnetwork_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "orbit_network.proto");
  GOOGLE_CHECK(file != NULL);
  StateNode_descriptor_ = file->message_type(0);
  static const int StateNode_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateNode, state_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateNode, state_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateNode, state_yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateNode, link_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateNode, link_param_),
  };
  StateNode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StateNode_descriptor_,
      StateNode::internal_default_instance(),
      StateNode_offsets_,
      -1,
      -1,
      -1,
      sizeof(StateNode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateNode, _internal_metadata_));
  OrbitNetwork_descriptor_ = file->message_type(1);
  static const int OrbitNetwork_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrbitNetwork, node_),
  };
  OrbitNetwork_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OrbitNetwork_descriptor_,
      OrbitNetwork::internal_default_instance(),
      OrbitNetwork_offsets_,
      -1,
      -1,
      -1,
      sizeof(OrbitNetwork),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrbitNetwork, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_orbit_5fnetwork_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StateNode_descriptor_, StateNode::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OrbitNetwork_descriptor_, OrbitNetwork::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_orbit_5fnetwork_2eproto() {
  StateNode_default_instance_.Shutdown();
  delete StateNode_reflection_;
  OrbitNetwork_default_instance_.Shutdown();
  delete OrbitNetwork_reflection_;
}

void protobuf_InitDefaults_orbit_5fnetwork_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  StateNode_default_instance_.DefaultConstruct();
  OrbitNetwork_default_instance_.DefaultConstruct();
  StateNode_default_instance_.get_mutable()->InitAsDefaultInstance();
  OrbitNetwork_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_orbit_5fnetwork_2eproto_once_);
void protobuf_InitDefaults_orbit_5fnetwork_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_orbit_5fnetwork_2eproto_once_,
                 &protobuf_InitDefaults_orbit_5fnetwork_2eproto_impl);
}
void protobuf_AddDesc_orbit_5fnetwork_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_orbit_5fnetwork_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023orbit_network.proto\022\023comm.orbitNet.pro"
    "to\"g\n\tStateNode\022\017\n\007state_x\030\001 \001(\002\022\017\n\007stat"
    "e_y\030\002 \001(\002\022\021\n\tstate_yaw\030\003 \001(\002\022\021\n\tlink_typ"
    "e\030\004 \001(\r\022\022\n\nlink_param\030\005 \003(\002\"<\n\014OrbitNetw"
    "ork\022,\n\004node\030\001 \003(\0132\036.comm.orbitNet.proto."
    "StateNodeb\006proto3", 217);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "orbit_network.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_orbit_5fnetwork_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_orbit_5fnetwork_2eproto_once_);
void protobuf_AddDesc_orbit_5fnetwork_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_orbit_5fnetwork_2eproto_once_,
                 &protobuf_AddDesc_orbit_5fnetwork_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_orbit_5fnetwork_2eproto {
  StaticDescriptorInitializer_orbit_5fnetwork_2eproto() {
    protobuf_AddDesc_orbit_5fnetwork_2eproto();
  }
} static_descriptor_initializer_orbit_5fnetwork_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StateNode::kStateXFieldNumber;
const int StateNode::kStateYFieldNumber;
const int StateNode::kStateYawFieldNumber;
const int StateNode::kLinkTypeFieldNumber;
const int StateNode::kLinkParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StateNode::StateNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_orbit_5fnetwork_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:comm.orbitNet.proto.StateNode)
}

void StateNode::InitAsDefaultInstance() {
}

StateNode::StateNode(const StateNode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comm.orbitNet.proto.StateNode)
}

void StateNode::SharedCtor() {
  ::memset(&state_x_, 0, reinterpret_cast<char*>(&link_type_) -
    reinterpret_cast<char*>(&state_x_) + sizeof(link_type_));
  _cached_size_ = 0;
}

StateNode::~StateNode() {
  // @@protoc_insertion_point(destructor:comm.orbitNet.proto.StateNode)
  SharedDtor();
}

void StateNode::SharedDtor() {
}

void StateNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateNode_descriptor_;
}

const StateNode& StateNode::default_instance() {
  protobuf_InitDefaults_orbit_5fnetwork_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StateNode> StateNode_default_instance_;

StateNode* StateNode::New(::google::protobuf::Arena* arena) const {
  StateNode* n = new StateNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StateNode::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.orbitNet.proto.StateNode)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StateNode, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StateNode*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(state_x_, link_type_);

#undef ZR_HELPER_
#undef ZR_

  link_param_.Clear();
}

bool StateNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comm.orbitNet.proto.StateNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float state_x = 1;
      case 1: {
        if (tag == 13) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &state_x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_state_y;
        break;
      }

      // optional float state_y = 2;
      case 2: {
        if (tag == 21) {
         parse_state_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &state_y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_state_yaw;
        break;
      }

      // optional float state_yaw = 3;
      case 3: {
        if (tag == 29) {
         parse_state_yaw:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &state_yaw_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_link_type;
        break;
      }

      // optional uint32 link_type = 4;
      case 4: {
        if (tag == 32) {
         parse_link_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &link_type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_link_param;
        break;
      }

      // repeated float link_param = 5;
      case 5: {
        if (tag == 42) {
         parse_link_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_link_param())));
        } else if (tag == 45) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42, input, this->mutable_link_param())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comm.orbitNet.proto.StateNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comm.orbitNet.proto.StateNode)
  return false;
#undef DO_
}

void StateNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comm.orbitNet.proto.StateNode)
  // optional float state_x = 1;
  if (this->state_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->state_x(), output);
  }

  // optional float state_y = 2;
  if (this->state_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->state_y(), output);
  }

  // optional float state_yaw = 3;
  if (this->state_yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->state_yaw(), output);
  }

  // optional uint32 link_type = 4;
  if (this->link_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->link_type(), output);
  }

  // repeated float link_param = 5;
  if (this->link_param_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_link_param_cached_byte_size_);
  }
  for (int i = 0; i < this->link_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->link_param(i), output);
  }

  // @@protoc_insertion_point(serialize_end:comm.orbitNet.proto.StateNode)
}

::google::protobuf::uint8* StateNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:comm.orbitNet.proto.StateNode)
  // optional float state_x = 1;
  if (this->state_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->state_x(), target);
  }

  // optional float state_y = 2;
  if (this->state_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->state_y(), target);
  }

  // optional float state_yaw = 3;
  if (this->state_yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->state_yaw(), target);
  }

  // optional uint32 link_type = 4;
  if (this->link_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->link_type(), target);
  }

  // repeated float link_param = 5;
  if (this->link_param_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _link_param_cached_byte_size_, target);
  }
  for (int i = 0; i < this->link_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->link_param(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:comm.orbitNet.proto.StateNode)
  return target;
}

size_t StateNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.orbitNet.proto.StateNode)
  size_t total_size = 0;

  // optional float state_x = 1;
  if (this->state_x() != 0) {
    total_size += 1 + 4;
  }

  // optional float state_y = 2;
  if (this->state_y() != 0) {
    total_size += 1 + 4;
  }

  // optional float state_yaw = 3;
  if (this->state_yaw() != 0) {
    total_size += 1 + 4;
  }

  // optional uint32 link_type = 4;
  if (this->link_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->link_type());
  }

  // repeated float link_param = 5;
  {
    size_t data_size = 0;
    unsigned int count = this->link_param_size();
    data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _link_param_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comm.orbitNet.proto.StateNode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StateNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StateNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comm.orbitNet.proto.StateNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comm.orbitNet.proto.StateNode)
    UnsafeMergeFrom(*source);
  }
}

void StateNode::MergeFrom(const StateNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comm.orbitNet.proto.StateNode)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StateNode::UnsafeMergeFrom(const StateNode& from) {
  GOOGLE_DCHECK(&from != this);
  link_param_.UnsafeMergeFrom(from.link_param_);
  if (from.state_x() != 0) {
    set_state_x(from.state_x());
  }
  if (from.state_y() != 0) {
    set_state_y(from.state_y());
  }
  if (from.state_yaw() != 0) {
    set_state_yaw(from.state_yaw());
  }
  if (from.link_type() != 0) {
    set_link_type(from.link_type());
  }
}

void StateNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comm.orbitNet.proto.StateNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateNode::CopyFrom(const StateNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.orbitNet.proto.StateNode)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StateNode::IsInitialized() const {

  return true;
}

void StateNode::Swap(StateNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StateNode::InternalSwap(StateNode* other) {
  std::swap(state_x_, other->state_x_);
  std::swap(state_y_, other->state_y_);
  std::swap(state_yaw_, other->state_yaw_);
  std::swap(link_type_, other->link_type_);
  link_param_.UnsafeArenaSwap(&other->link_param_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StateNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateNode_descriptor_;
  metadata.reflection = StateNode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StateNode

// optional float state_x = 1;
void StateNode::clear_state_x() {
  state_x_ = 0;
}
float StateNode::state_x() const {
  // @@protoc_insertion_point(field_get:comm.orbitNet.proto.StateNode.state_x)
  return state_x_;
}
void StateNode::set_state_x(float value) {
  
  state_x_ = value;
  // @@protoc_insertion_point(field_set:comm.orbitNet.proto.StateNode.state_x)
}

// optional float state_y = 2;
void StateNode::clear_state_y() {
  state_y_ = 0;
}
float StateNode::state_y() const {
  // @@protoc_insertion_point(field_get:comm.orbitNet.proto.StateNode.state_y)
  return state_y_;
}
void StateNode::set_state_y(float value) {
  
  state_y_ = value;
  // @@protoc_insertion_point(field_set:comm.orbitNet.proto.StateNode.state_y)
}

// optional float state_yaw = 3;
void StateNode::clear_state_yaw() {
  state_yaw_ = 0;
}
float StateNode::state_yaw() const {
  // @@protoc_insertion_point(field_get:comm.orbitNet.proto.StateNode.state_yaw)
  return state_yaw_;
}
void StateNode::set_state_yaw(float value) {
  
  state_yaw_ = value;
  // @@protoc_insertion_point(field_set:comm.orbitNet.proto.StateNode.state_yaw)
}

// optional uint32 link_type = 4;
void StateNode::clear_link_type() {
  link_type_ = 0u;
}
::google::protobuf::uint32 StateNode::link_type() const {
  // @@protoc_insertion_point(field_get:comm.orbitNet.proto.StateNode.link_type)
  return link_type_;
}
void StateNode::set_link_type(::google::protobuf::uint32 value) {
  
  link_type_ = value;
  // @@protoc_insertion_point(field_set:comm.orbitNet.proto.StateNode.link_type)
}

// repeated float link_param = 5;
int StateNode::link_param_size() const {
  return link_param_.size();
}
void StateNode::clear_link_param() {
  link_param_.Clear();
}
float StateNode::link_param(int index) const {
  // @@protoc_insertion_point(field_get:comm.orbitNet.proto.StateNode.link_param)
  return link_param_.Get(index);
}
void StateNode::set_link_param(int index, float value) {
  link_param_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.orbitNet.proto.StateNode.link_param)
}
void StateNode::add_link_param(float value) {
  link_param_.Add(value);
  // @@protoc_insertion_point(field_add:comm.orbitNet.proto.StateNode.link_param)
}
const ::google::protobuf::RepeatedField< float >&
StateNode::link_param() const {
  // @@protoc_insertion_point(field_list:comm.orbitNet.proto.StateNode.link_param)
  return link_param_;
}
::google::protobuf::RepeatedField< float >*
StateNode::mutable_link_param() {
  // @@protoc_insertion_point(field_mutable_list:comm.orbitNet.proto.StateNode.link_param)
  return &link_param_;
}

inline const StateNode* StateNode::internal_default_instance() {
  return &StateNode_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrbitNetwork::kNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrbitNetwork::OrbitNetwork()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_orbit_5fnetwork_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:comm.orbitNet.proto.OrbitNetwork)
}

void OrbitNetwork::InitAsDefaultInstance() {
}

OrbitNetwork::OrbitNetwork(const OrbitNetwork& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comm.orbitNet.proto.OrbitNetwork)
}

void OrbitNetwork::SharedCtor() {
  _cached_size_ = 0;
}

OrbitNetwork::~OrbitNetwork() {
  // @@protoc_insertion_point(destructor:comm.orbitNet.proto.OrbitNetwork)
  SharedDtor();
}

void OrbitNetwork::SharedDtor() {
}

void OrbitNetwork::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrbitNetwork::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrbitNetwork_descriptor_;
}

const OrbitNetwork& OrbitNetwork::default_instance() {
  protobuf_InitDefaults_orbit_5fnetwork_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OrbitNetwork> OrbitNetwork_default_instance_;

OrbitNetwork* OrbitNetwork::New(::google::protobuf::Arena* arena) const {
  OrbitNetwork* n = new OrbitNetwork;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OrbitNetwork::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.orbitNet.proto.OrbitNetwork)
  node_.Clear();
}

bool OrbitNetwork::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comm.orbitNet.proto.OrbitNetwork)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .comm.orbitNet.proto.StateNode node = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_node;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comm.orbitNet.proto.OrbitNetwork)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comm.orbitNet.proto.OrbitNetwork)
  return false;
#undef DO_
}

void OrbitNetwork::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comm.orbitNet.proto.OrbitNetwork)
  // repeated .comm.orbitNet.proto.StateNode node = 1;
  for (unsigned int i = 0, n = this->node_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(i), output);
  }

  // @@protoc_insertion_point(serialize_end:comm.orbitNet.proto.OrbitNetwork)
}

::google::protobuf::uint8* OrbitNetwork::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:comm.orbitNet.proto.OrbitNetwork)
  // repeated .comm.orbitNet.proto.StateNode node = 1;
  for (unsigned int i = 0, n = this->node_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->node(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:comm.orbitNet.proto.OrbitNetwork)
  return target;
}

size_t OrbitNetwork::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.orbitNet.proto.OrbitNetwork)
  size_t total_size = 0;

  // repeated .comm.orbitNet.proto.StateNode node = 1;
  {
    unsigned int count = this->node_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrbitNetwork::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comm.orbitNet.proto.OrbitNetwork)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OrbitNetwork* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OrbitNetwork>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comm.orbitNet.proto.OrbitNetwork)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comm.orbitNet.proto.OrbitNetwork)
    UnsafeMergeFrom(*source);
  }
}

void OrbitNetwork::MergeFrom(const OrbitNetwork& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comm.orbitNet.proto.OrbitNetwork)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OrbitNetwork::UnsafeMergeFrom(const OrbitNetwork& from) {
  GOOGLE_DCHECK(&from != this);
  node_.MergeFrom(from.node_);
}

void OrbitNetwork::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comm.orbitNet.proto.OrbitNetwork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrbitNetwork::CopyFrom(const OrbitNetwork& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.orbitNet.proto.OrbitNetwork)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OrbitNetwork::IsInitialized() const {

  return true;
}

void OrbitNetwork::Swap(OrbitNetwork* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrbitNetwork::InternalSwap(OrbitNetwork* other) {
  node_.UnsafeArenaSwap(&other->node_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OrbitNetwork::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrbitNetwork_descriptor_;
  metadata.reflection = OrbitNetwork_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OrbitNetwork

// repeated .comm.orbitNet.proto.StateNode node = 1;
int OrbitNetwork::node_size() const {
  return node_.size();
}
void OrbitNetwork::clear_node() {
  node_.Clear();
}
const ::comm::orbitNet::proto::StateNode& OrbitNetwork::node(int index) const {
  // @@protoc_insertion_point(field_get:comm.orbitNet.proto.OrbitNetwork.node)
  return node_.Get(index);
}
::comm::orbitNet::proto::StateNode* OrbitNetwork::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:comm.orbitNet.proto.OrbitNetwork.node)
  return node_.Mutable(index);
}
::comm::orbitNet::proto::StateNode* OrbitNetwork::add_node() {
  // @@protoc_insertion_point(field_add:comm.orbitNet.proto.OrbitNetwork.node)
  return node_.Add();
}
::google::protobuf::RepeatedPtrField< ::comm::orbitNet::proto::StateNode >*
OrbitNetwork::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:comm.orbitNet.proto.OrbitNetwork.node)
  return &node_;
}
const ::google::protobuf::RepeatedPtrField< ::comm::orbitNet::proto::StateNode >&
OrbitNetwork::node() const {
  // @@protoc_insertion_point(field_list:comm.orbitNet.proto.OrbitNetwork.node)
  return node_;
}

inline const OrbitNetwork* OrbitNetwork::internal_default_instance() {
  return &OrbitNetwork_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace orbitNet
}  // namespace comm

// @@protoc_insertion_point(global_scope)
