// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pose.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pose.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comm {
namespace pose {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Vector2d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector2d_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector2f_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector2f_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transform2f_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transform2f_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transform2d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transform2d_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pose_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_pose_2eproto() {
  protobuf_AddDesc_pose_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pose.proto");
  GOOGLE_CHECK(file != NULL);
  Vector2d_descriptor_ = file->message_type(0);
  static const int Vector2d_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2d, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2d, y_),
  };
  Vector2d_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector2d_descriptor_,
      Vector2d::internal_default_instance(),
      Vector2d_offsets_,
      -1,
      -1,
      -1,
      sizeof(Vector2d),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2d, _internal_metadata_));
  Vector2f_descriptor_ = file->message_type(1);
  static const int Vector2f_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2f, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2f, y_),
  };
  Vector2f_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector2f_descriptor_,
      Vector2f::internal_default_instance(),
      Vector2f_offsets_,
      -1,
      -1,
      -1,
      sizeof(Vector2f),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2f, _internal_metadata_));
  Transform2f_descriptor_ = file->message_type(2);
  static const int Transform2f_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform2f, translation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform2f, rotation_),
  };
  Transform2f_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Transform2f_descriptor_,
      Transform2f::internal_default_instance(),
      Transform2f_offsets_,
      -1,
      -1,
      -1,
      sizeof(Transform2f),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform2f, _internal_metadata_));
  Transform2d_descriptor_ = file->message_type(3);
  static const int Transform2d_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform2d, translation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform2d, rotation_),
  };
  Transform2d_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Transform2d_descriptor_,
      Transform2d::internal_default_instance(),
      Transform2d_offsets_,
      -1,
      -1,
      -1,
      sizeof(Transform2d),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform2d, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pose_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector2d_descriptor_, Vector2d::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector2f_descriptor_, Vector2f::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Transform2f_descriptor_, Transform2f::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Transform2d_descriptor_, Transform2d::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pose_2eproto() {
  Vector2d_default_instance_.Shutdown();
  delete Vector2d_reflection_;
  Vector2f_default_instance_.Shutdown();
  delete Vector2f_reflection_;
  Transform2f_default_instance_.Shutdown();
  delete Transform2f_reflection_;
  Transform2d_default_instance_.Shutdown();
  delete Transform2d_reflection_;
}

void protobuf_InitDefaults_pose_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Vector2d_default_instance_.DefaultConstruct();
  Vector2f_default_instance_.DefaultConstruct();
  Transform2f_default_instance_.DefaultConstruct();
  Transform2d_default_instance_.DefaultConstruct();
  Vector2d_default_instance_.get_mutable()->InitAsDefaultInstance();
  Vector2f_default_instance_.get_mutable()->InitAsDefaultInstance();
  Transform2f_default_instance_.get_mutable()->InitAsDefaultInstance();
  Transform2d_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_pose_2eproto_once_);
void protobuf_InitDefaults_pose_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_pose_2eproto_once_,
                 &protobuf_InitDefaults_pose_2eproto_impl);
}
void protobuf_AddDesc_pose_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_pose_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\npose.proto\022\017comm.pose.proto\" \n\010Vector2"
    "d\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\" \n\010Vector2f\022\t\n\001x"
    "\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"O\n\013Transform2f\022.\n\013tran"
    "slation\030\001 \001(\0132\031.comm.pose.proto.Vector2f"
    "\022\020\n\010rotation\030\002 \001(\002\"O\n\013Transform2d\022.\n\013tra"
    "nslation\030\001 \001(\0132\031.comm.pose.proto.Vector2"
    "d\022\020\n\010rotation\030\002 \001(\001b\006proto3", 267);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pose.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pose_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_pose_2eproto_once_);
void protobuf_AddDesc_pose_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_pose_2eproto_once_,
                 &protobuf_AddDesc_pose_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pose_2eproto {
  StaticDescriptorInitializer_pose_2eproto() {
    protobuf_AddDesc_pose_2eproto();
  }
} static_descriptor_initializer_pose_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector2d::kXFieldNumber;
const int Vector2d::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector2d::Vector2d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pose_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:comm.pose.proto.Vector2d)
}

void Vector2d::InitAsDefaultInstance() {
}

Vector2d::Vector2d(const Vector2d& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comm.pose.proto.Vector2d)
}

void Vector2d::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  _cached_size_ = 0;
}

Vector2d::~Vector2d() {
  // @@protoc_insertion_point(destructor:comm.pose.proto.Vector2d)
  SharedDtor();
}

void Vector2d::SharedDtor() {
}

void Vector2d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector2d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector2d_descriptor_;
}

const Vector2d& Vector2d::default_instance() {
  protobuf_InitDefaults_pose_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Vector2d> Vector2d_default_instance_;

Vector2d* Vector2d::New(::google::protobuf::Arena* arena) const {
  Vector2d* n = new Vector2d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector2d::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.pose.proto.Vector2d)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector2d, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector2d*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool Vector2d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comm.pose.proto.Vector2d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comm.pose.proto.Vector2d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comm.pose.proto.Vector2d)
  return false;
#undef DO_
}

void Vector2d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comm.pose.proto.Vector2d)
  // optional double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:comm.pose.proto.Vector2d)
}

::google::protobuf::uint8* Vector2d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:comm.pose.proto.Vector2d)
  // optional double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:comm.pose.proto.Vector2d)
  return target;
}

size_t Vector2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.pose.proto.Vector2d)
  size_t total_size = 0;

  // optional double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector2d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comm.pose.proto.Vector2d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Vector2d* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector2d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comm.pose.proto.Vector2d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comm.pose.proto.Vector2d)
    UnsafeMergeFrom(*source);
  }
}

void Vector2d::MergeFrom(const Vector2d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comm.pose.proto.Vector2d)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Vector2d::UnsafeMergeFrom(const Vector2d& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Vector2d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comm.pose.proto.Vector2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2d::CopyFrom(const Vector2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.pose.proto.Vector2d)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Vector2d::IsInitialized() const {

  return true;
}

void Vector2d::Swap(Vector2d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector2d::InternalSwap(Vector2d* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector2d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector2d_descriptor_;
  metadata.reflection = Vector2d_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector2d

// optional double x = 1;
void Vector2d::clear_x() {
  x_ = 0;
}
double Vector2d::x() const {
  // @@protoc_insertion_point(field_get:comm.pose.proto.Vector2d.x)
  return x_;
}
void Vector2d::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:comm.pose.proto.Vector2d.x)
}

// optional double y = 2;
void Vector2d::clear_y() {
  y_ = 0;
}
double Vector2d::y() const {
  // @@protoc_insertion_point(field_get:comm.pose.proto.Vector2d.y)
  return y_;
}
void Vector2d::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:comm.pose.proto.Vector2d.y)
}

inline const Vector2d* Vector2d::internal_default_instance() {
  return &Vector2d_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector2f::kXFieldNumber;
const int Vector2f::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector2f::Vector2f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pose_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:comm.pose.proto.Vector2f)
}

void Vector2f::InitAsDefaultInstance() {
}

Vector2f::Vector2f(const Vector2f& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comm.pose.proto.Vector2f)
}

void Vector2f::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  _cached_size_ = 0;
}

Vector2f::~Vector2f() {
  // @@protoc_insertion_point(destructor:comm.pose.proto.Vector2f)
  SharedDtor();
}

void Vector2f::SharedDtor() {
}

void Vector2f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector2f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector2f_descriptor_;
}

const Vector2f& Vector2f::default_instance() {
  protobuf_InitDefaults_pose_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Vector2f> Vector2f_default_instance_;

Vector2f* Vector2f::New(::google::protobuf::Arena* arena) const {
  Vector2f* n = new Vector2f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector2f::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.pose.proto.Vector2f)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector2f, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector2f*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool Vector2f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comm.pose.proto.Vector2f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comm.pose.proto.Vector2f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comm.pose.proto.Vector2f)
  return false;
#undef DO_
}

void Vector2f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comm.pose.proto.Vector2f)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:comm.pose.proto.Vector2f)
}

::google::protobuf::uint8* Vector2f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:comm.pose.proto.Vector2f)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:comm.pose.proto.Vector2f)
  return target;
}

size_t Vector2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.pose.proto.Vector2f)
  size_t total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector2f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comm.pose.proto.Vector2f)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Vector2f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector2f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comm.pose.proto.Vector2f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comm.pose.proto.Vector2f)
    UnsafeMergeFrom(*source);
  }
}

void Vector2f::MergeFrom(const Vector2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comm.pose.proto.Vector2f)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Vector2f::UnsafeMergeFrom(const Vector2f& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Vector2f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comm.pose.proto.Vector2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2f::CopyFrom(const Vector2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.pose.proto.Vector2f)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Vector2f::IsInitialized() const {

  return true;
}

void Vector2f::Swap(Vector2f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector2f::InternalSwap(Vector2f* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector2f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector2f_descriptor_;
  metadata.reflection = Vector2f_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector2f

// optional float x = 1;
void Vector2f::clear_x() {
  x_ = 0;
}
float Vector2f::x() const {
  // @@protoc_insertion_point(field_get:comm.pose.proto.Vector2f.x)
  return x_;
}
void Vector2f::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:comm.pose.proto.Vector2f.x)
}

// optional float y = 2;
void Vector2f::clear_y() {
  y_ = 0;
}
float Vector2f::y() const {
  // @@protoc_insertion_point(field_get:comm.pose.proto.Vector2f.y)
  return y_;
}
void Vector2f::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:comm.pose.proto.Vector2f.y)
}

inline const Vector2f* Vector2f::internal_default_instance() {
  return &Vector2f_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transform2f::kTranslationFieldNumber;
const int Transform2f::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transform2f::Transform2f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pose_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:comm.pose.proto.Transform2f)
}

void Transform2f::InitAsDefaultInstance() {
  translation_ = const_cast< ::comm::pose::proto::Vector2f*>(
      ::comm::pose::proto::Vector2f::internal_default_instance());
}

Transform2f::Transform2f(const Transform2f& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comm.pose.proto.Transform2f)
}

void Transform2f::SharedCtor() {
  translation_ = NULL;
  rotation_ = 0;
  _cached_size_ = 0;
}

Transform2f::~Transform2f() {
  // @@protoc_insertion_point(destructor:comm.pose.proto.Transform2f)
  SharedDtor();
}

void Transform2f::SharedDtor() {
  if (this != &Transform2f_default_instance_.get()) {
    delete translation_;
  }
}

void Transform2f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transform2f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transform2f_descriptor_;
}

const Transform2f& Transform2f::default_instance() {
  protobuf_InitDefaults_pose_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Transform2f> Transform2f_default_instance_;

Transform2f* Transform2f::New(::google::protobuf::Arena* arena) const {
  Transform2f* n = new Transform2f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transform2f::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.pose.proto.Transform2f)
  if (GetArenaNoVirtual() == NULL && translation_ != NULL) delete translation_;
  translation_ = NULL;
  rotation_ = 0;
}

bool Transform2f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comm.pose.proto.Transform2f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .comm.pose.proto.Vector2f translation = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_rotation;
        break;
      }

      // optional float rotation = 2;
      case 2: {
        if (tag == 21) {
         parse_rotation:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comm.pose.proto.Transform2f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comm.pose.proto.Transform2f)
  return false;
#undef DO_
}

void Transform2f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comm.pose.proto.Transform2f)
  // optional .comm.pose.proto.Vector2f translation = 1;
  if (this->has_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->translation_, output);
  }

  // optional float rotation = 2;
  if (this->rotation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->rotation(), output);
  }

  // @@protoc_insertion_point(serialize_end:comm.pose.proto.Transform2f)
}

::google::protobuf::uint8* Transform2f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:comm.pose.proto.Transform2f)
  // optional .comm.pose.proto.Vector2f translation = 1;
  if (this->has_translation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->translation_, false, target);
  }

  // optional float rotation = 2;
  if (this->rotation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->rotation(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:comm.pose.proto.Transform2f)
  return target;
}

size_t Transform2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.pose.proto.Transform2f)
  size_t total_size = 0;

  // optional .comm.pose.proto.Vector2f translation = 1;
  if (this->has_translation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->translation_);
  }

  // optional float rotation = 2;
  if (this->rotation() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transform2f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comm.pose.proto.Transform2f)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Transform2f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transform2f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comm.pose.proto.Transform2f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comm.pose.proto.Transform2f)
    UnsafeMergeFrom(*source);
  }
}

void Transform2f::MergeFrom(const Transform2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comm.pose.proto.Transform2f)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Transform2f::UnsafeMergeFrom(const Transform2f& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_translation()) {
    mutable_translation()->::comm::pose::proto::Vector2f::MergeFrom(from.translation());
  }
  if (from.rotation() != 0) {
    set_rotation(from.rotation());
  }
}

void Transform2f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comm.pose.proto.Transform2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transform2f::CopyFrom(const Transform2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.pose.proto.Transform2f)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Transform2f::IsInitialized() const {

  return true;
}

void Transform2f::Swap(Transform2f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transform2f::InternalSwap(Transform2f* other) {
  std::swap(translation_, other->translation_);
  std::swap(rotation_, other->rotation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transform2f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transform2f_descriptor_;
  metadata.reflection = Transform2f_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transform2f

// optional .comm.pose.proto.Vector2f translation = 1;
bool Transform2f::has_translation() const {
  return this != internal_default_instance() && translation_ != NULL;
}
void Transform2f::clear_translation() {
  if (GetArenaNoVirtual() == NULL && translation_ != NULL) delete translation_;
  translation_ = NULL;
}
const ::comm::pose::proto::Vector2f& Transform2f::translation() const {
  // @@protoc_insertion_point(field_get:comm.pose.proto.Transform2f.translation)
  return translation_ != NULL ? *translation_
                         : *::comm::pose::proto::Vector2f::internal_default_instance();
}
::comm::pose::proto::Vector2f* Transform2f::mutable_translation() {
  
  if (translation_ == NULL) {
    translation_ = new ::comm::pose::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:comm.pose.proto.Transform2f.translation)
  return translation_;
}
::comm::pose::proto::Vector2f* Transform2f::release_translation() {
  // @@protoc_insertion_point(field_release:comm.pose.proto.Transform2f.translation)
  
  ::comm::pose::proto::Vector2f* temp = translation_;
  translation_ = NULL;
  return temp;
}
void Transform2f::set_allocated_translation(::comm::pose::proto::Vector2f* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:comm.pose.proto.Transform2f.translation)
}

// optional float rotation = 2;
void Transform2f::clear_rotation() {
  rotation_ = 0;
}
float Transform2f::rotation() const {
  // @@protoc_insertion_point(field_get:comm.pose.proto.Transform2f.rotation)
  return rotation_;
}
void Transform2f::set_rotation(float value) {
  
  rotation_ = value;
  // @@protoc_insertion_point(field_set:comm.pose.proto.Transform2f.rotation)
}

inline const Transform2f* Transform2f::internal_default_instance() {
  return &Transform2f_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transform2d::kTranslationFieldNumber;
const int Transform2d::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transform2d::Transform2d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pose_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:comm.pose.proto.Transform2d)
}

void Transform2d::InitAsDefaultInstance() {
  translation_ = const_cast< ::comm::pose::proto::Vector2d*>(
      ::comm::pose::proto::Vector2d::internal_default_instance());
}

Transform2d::Transform2d(const Transform2d& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comm.pose.proto.Transform2d)
}

void Transform2d::SharedCtor() {
  translation_ = NULL;
  rotation_ = 0;
  _cached_size_ = 0;
}

Transform2d::~Transform2d() {
  // @@protoc_insertion_point(destructor:comm.pose.proto.Transform2d)
  SharedDtor();
}

void Transform2d::SharedDtor() {
  if (this != &Transform2d_default_instance_.get()) {
    delete translation_;
  }
}

void Transform2d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transform2d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transform2d_descriptor_;
}

const Transform2d& Transform2d::default_instance() {
  protobuf_InitDefaults_pose_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Transform2d> Transform2d_default_instance_;

Transform2d* Transform2d::New(::google::protobuf::Arena* arena) const {
  Transform2d* n = new Transform2d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transform2d::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.pose.proto.Transform2d)
  if (GetArenaNoVirtual() == NULL && translation_ != NULL) delete translation_;
  translation_ = NULL;
  rotation_ = 0;
}

bool Transform2d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comm.pose.proto.Transform2d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .comm.pose.proto.Vector2d translation = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_rotation;
        break;
      }

      // optional double rotation = 2;
      case 2: {
        if (tag == 17) {
         parse_rotation:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotation_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comm.pose.proto.Transform2d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comm.pose.proto.Transform2d)
  return false;
#undef DO_
}

void Transform2d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comm.pose.proto.Transform2d)
  // optional .comm.pose.proto.Vector2d translation = 1;
  if (this->has_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->translation_, output);
  }

  // optional double rotation = 2;
  if (this->rotation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rotation(), output);
  }

  // @@protoc_insertion_point(serialize_end:comm.pose.proto.Transform2d)
}

::google::protobuf::uint8* Transform2d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:comm.pose.proto.Transform2d)
  // optional .comm.pose.proto.Vector2d translation = 1;
  if (this->has_translation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->translation_, false, target);
  }

  // optional double rotation = 2;
  if (this->rotation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->rotation(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:comm.pose.proto.Transform2d)
  return target;
}

size_t Transform2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.pose.proto.Transform2d)
  size_t total_size = 0;

  // optional .comm.pose.proto.Vector2d translation = 1;
  if (this->has_translation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->translation_);
  }

  // optional double rotation = 2;
  if (this->rotation() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transform2d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comm.pose.proto.Transform2d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Transform2d* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transform2d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comm.pose.proto.Transform2d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comm.pose.proto.Transform2d)
    UnsafeMergeFrom(*source);
  }
}

void Transform2d::MergeFrom(const Transform2d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comm.pose.proto.Transform2d)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Transform2d::UnsafeMergeFrom(const Transform2d& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_translation()) {
    mutable_translation()->::comm::pose::proto::Vector2d::MergeFrom(from.translation());
  }
  if (from.rotation() != 0) {
    set_rotation(from.rotation());
  }
}

void Transform2d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comm.pose.proto.Transform2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transform2d::CopyFrom(const Transform2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.pose.proto.Transform2d)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Transform2d::IsInitialized() const {

  return true;
}

void Transform2d::Swap(Transform2d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transform2d::InternalSwap(Transform2d* other) {
  std::swap(translation_, other->translation_);
  std::swap(rotation_, other->rotation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transform2d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transform2d_descriptor_;
  metadata.reflection = Transform2d_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transform2d

// optional .comm.pose.proto.Vector2d translation = 1;
bool Transform2d::has_translation() const {
  return this != internal_default_instance() && translation_ != NULL;
}
void Transform2d::clear_translation() {
  if (GetArenaNoVirtual() == NULL && translation_ != NULL) delete translation_;
  translation_ = NULL;
}
const ::comm::pose::proto::Vector2d& Transform2d::translation() const {
  // @@protoc_insertion_point(field_get:comm.pose.proto.Transform2d.translation)
  return translation_ != NULL ? *translation_
                         : *::comm::pose::proto::Vector2d::internal_default_instance();
}
::comm::pose::proto::Vector2d* Transform2d::mutable_translation() {
  
  if (translation_ == NULL) {
    translation_ = new ::comm::pose::proto::Vector2d;
  }
  // @@protoc_insertion_point(field_mutable:comm.pose.proto.Transform2d.translation)
  return translation_;
}
::comm::pose::proto::Vector2d* Transform2d::release_translation() {
  // @@protoc_insertion_point(field_release:comm.pose.proto.Transform2d.translation)
  
  ::comm::pose::proto::Vector2d* temp = translation_;
  translation_ = NULL;
  return temp;
}
void Transform2d::set_allocated_translation(::comm::pose::proto::Vector2d* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:comm.pose.proto.Transform2d.translation)
}

// optional double rotation = 2;
void Transform2d::clear_rotation() {
  rotation_ = 0;
}
double Transform2d::rotation() const {
  // @@protoc_insertion_point(field_get:comm.pose.proto.Transform2d.rotation)
  return rotation_;
}
void Transform2d::set_rotation(double value) {
  
  rotation_ = value;
  // @@protoc_insertion_point(field_set:comm.pose.proto.Transform2d.rotation)
}

inline const Transform2d* Transform2d::internal_default_instance() {
  return &Transform2d_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace pose
}  // namespace comm

// @@protoc_insertion_point(global_scope)
